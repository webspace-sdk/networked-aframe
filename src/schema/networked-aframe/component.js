"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Component = void 0;
var flatbuffers = require("flatbuffers");
var Component = /** @class */ (function () {
    function Component() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Component.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Component.getRootAsComponent = function (bb, obj) {
        return (obj || new Component()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Component.getSizePrefixedRootAsComponent = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Component()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Component.prototype.index = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Component.prototype.data = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Component.prototype.dataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Component.prototype.dataArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Component.startComponent = function (builder) {
        builder.startObject(2);
    };
    Component.addIndex = function (builder, index) {
        builder.addFieldInt8(0, index, 0);
    };
    Component.addData = function (builder, dataOffset) {
        builder.addFieldOffset(1, dataOffset, 0);
    };
    Component.createDataVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Component.startDataVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Component.endComponent = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 6); // data
        return offset;
    };
    Component.createComponent = function (builder, index, dataOffset) {
        Component.startComponent(builder);
        Component.addIndex(builder, index);
        Component.addData(builder, dataOffset);
        return Component.endComponent(builder);
    };
    return Component;
}());
exports.Component = Component;
